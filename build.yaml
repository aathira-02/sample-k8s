Setting up a **GitHub Action to deploy to Google Kubernetes Engine (GKE)** involves a few key steps:

---

## ‚úÖ Prerequisites

1. **GCP Project** with:

   * GKE cluster running.
   * `gcloud` CLI configured (for local testing).
   * `kubectl` configured for your cluster.

2. **GitHub Repository** with:

   * App source code and Dockerfile.
   * Kubernetes deployment YAMLs (or Helm charts).

3. **Service Account** in GCP with necessary permissions:

   * `Kubernetes Engine Developer`
   * `Storage Admin` (for pushing to GCR/Artifact Registry)
   * `Service Account User` (if impersonating other service accounts)

---

## üîê Step 1: Create and download a service account key

1. **Create a service account** in IAM:

   ```bash
   gcloud iam service-accounts create github-actions \
     --display-name "GitHub Actions for GKE"
   ```

2. **Assign roles:**

   ```bash
   gcloud projects add-iam-policy-binding YOUR_PROJECT_ID \
     --member="serviceAccount:github-actions@YOUR_PROJECT_ID.iam.gserviceaccount.com" \
     --role="roles/container.developer"

   gcloud projects add-iam-policy-binding YOUR_PROJECT_ID \
     --member="serviceAccount:github-actions@YOUR_PROJECT_ID.iam.gserviceaccount.com" \
     --role="roles/storage.admin"
   ```

3. **Generate key and download JSON:**

   ```bash
   gcloud iam service-accounts keys create key.json \
     --iam-account=github-actions@YOUR_PROJECT_ID.iam.gserviceaccount.com
   ```

4. **Add the key as a GitHub secret:**

   * Go to your GitHub repo ‚Üí **Settings** ‚Üí **Secrets and variables** ‚Üí **Actions**.
   * Add a secret called `GCP_SA_KEY` with the content of `key.json`.

---

## üõ†Ô∏è Step 2: Set up your GitHub Actions workflow

Create a file at `.github/workflows/deploy.yml`:

```yaml
name: Deploy to GKE

on:
  push:
    branches:
      - main  # or your deployment branch

env:
  PROJECT_ID: your-gcp-project-id
  GKE_CLUSTER: your-gke-cluster-name
  GKE_ZONE: your-cluster-zone # e.g. us-central1-a
  DEPLOYMENT_NAME: your-k8s-deployment-name
  IMAGE_NAME: gcr.io/${{ env.PROJECT_ID }}/your-app

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        export_default_credentials: true

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Build and Push Docker image
      run: |
        docker build -t $IMAGE_NAME:$GITHUB_SHA .
        docker push $IMAGE_NAME:$GITHUB_SHA

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE

    - name: Deploy to GKE
      run: |
        kubectl set image deployment/$DEPLOYMENT_NAME $DEPLOYMENT_NAME=$IMAGE_NAME:$GITHUB_SHA
        kubectl rollout status deployment/$DEPLOYMENT_NAME
```

---

## üìÑ Notes

* Ensure your Kubernetes YAML deployment file has a container name that matches `$DEPLOYMENT_NAME`.
* If you're using **Helm**, you can replace the `kubectl` commands with Helm install/upgrade commands.
* If your GKE cluster is **regional**, replace `--zone` with `--region`.

---

## üöÄ Optional Improvements

* Use **Artifact Registry** instead of GCR (requires slightly different `gcloud` auth).
* Add a **staging** environment with different branches and clusters.
* Add **manual approval** steps or **Slack notifications**.

---

Would you like a tailored example with your app name and GCP settings?
